// Generated by CoffeeScript 1.6.3
/*
# Welcome to the new js2coffee 2.0, now
# rewritten to use the esprima parser.
# try it out!
*/


(function() {
  var AnimatedObject, Clock, GraphicsController, clock, controller, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GraphicsController = (function() {
    function GraphicsController() {
      this.poll = __bind(this.poll, this);
      var that;
      that = this;
      this.previousData = {};
      this.currentData = {};
      that.poll();
      setInterval((function() {
        return $(window).trigger('tick');
      }), 500);
    }

    GraphicsController.prototype.poll = function() {
      var pollUrl,
        _this = this;
      pollUrl = 'http://localhost:27015/graphics.json';
      $.ajax(pollUrl, {
        timeout: 15000,
        success: function(data) {
          var widget, _i, _len, _ref;
          if (!data) {
            console.log("No data received");
            return;
          }
          _this.currentData = JSON.parse(data);
          console.log(_this.currentData);
          _ref = _this.currentData;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            widget = _ref[_i];
            window[widget].update(widget);
          }
          console.log("Data dump: " + JSON.stringify(_this.currentData));
        }
      });
    };

    return GraphicsController;

  })();

  AnimatedObject = (function() {
    function AnimatedObject() {
      this.update = __bind(this.update, this);
      this.properties = {
        visible: true,
        content: {}
      };
      this.animationSpeed = 500;
      $(window).bind('tick', this.tick);
    }

    AnimatedObject.prototype.update = function(widget) {
      console.log(widget);
      if (this.properties.visible !== widget.visible) {
        console.log("Visibility changed");
      }
      return console.log("Update called on " + self);
    };

    AnimatedObject.prototype.tick = function() {};

    return AnimatedObject;

  })();

  Clock = (function(_super) {
    __extends(Clock, _super);

    function Clock() {
      _ref = Clock.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Clock.prototype.tick = function() {
      var currentMinutes, currentSeconds, d;
      d = new Date();
      currentMinutes = d.getMinutes();
      currentSeconds = d.getSeconds();
      if (currentMinutes.toString().length === 1) {
        currentMinutes = "0" + currentMinutes;
      }
      if (currentSeconds.toString().length === 1) {
        currentSeconds = "0" + currentSeconds;
      }
      return $('#clock').html(d.getHours() + ':' + currentMinutes + ':' + currentSeconds);
    };

    Clock.prototype.hide = function() {
      return $('#clock').fadeOut();
    };

    Clock.prototype.show = function() {
      return $('#clock').fadeIn();
    };

    return Clock;

  })(AnimatedObject);

  controller = new GraphicsController();

  clock = new Clock();

}).call(this);
